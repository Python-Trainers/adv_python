{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OS Module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "posix\n"
     ]
    }
   ],
   "source": [
    "#os.name: This function gives the name of the operating system dependent module imported. \n",
    "#The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’\n",
    "import os \n",
    "print(os.name) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jovyan/adv_python/File Operations\n"
     ]
    }
   ],
   "source": [
    "#os.getcwd(): Function os.getcwd(), returns the Current Working Directory(CWD) \n",
    "#of the file used to execute the code, can vary from system to system.\n",
    "import os \n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To print absolute path on your system \n",
    "os.path.abspath('.')  \n",
    "  \n",
    "# To print files and directories in the current directory \n",
    "# on your system \n",
    "os.listdir('.') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem reading: v6000.txt\n"
     ]
    }
   ],
   "source": [
    "#os.error: All functions in this module raise OSError in the \n",
    "#case of invalid or inaccessible file names and paths, or other arguments that have the correct type, \n",
    "#but are not accepted by the operating system. os.error is an alias for built-in OSError exception.\n",
    "import os \n",
    "try: \n",
    "    # If the file does not exist, \n",
    "    # then it would throw an IOError \n",
    "    filename = 'v6000.txt'\n",
    "    f = open(filename, 'r') \n",
    "    text = f.read() \n",
    "    f.close() \n",
    "# Control jumps directly to here if  \n",
    "#any of the above lines throws IOError.     \n",
    "except IOError: \n",
    "    # print(os.error) will <class 'OSError'> \n",
    "    print('Problem reading: ' + filename) \n",
    "      \n",
    "# In any case, the code then continues with  \n",
    "# the line after the try/except "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#os.popen(): This method opens a pipe to or from command. \n",
    "#The return value can be read or written depending on whether mode is ‘r’ or ‘w’.\n",
    "import os \n",
    "fd = \"GFG.txt\"\n",
    "  \n",
    "# popen() is similar to open() \n",
    "file = open(fd, 'w') \n",
    "file.write(\"Hello\") \n",
    "file.close() \n",
    "file = open(fd, 'r') \n",
    "text = file.read() \n",
    "print(text) \n",
    "  \n",
    "# popen() provides a pipe/gateway and accesses the file directly \n",
    "file = os.popen(fd, 'w') \n",
    "file.write(\"Helo\") \n",
    "# File not closed, shown in next function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "an integer is required (got type _io.TextIOWrapper)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-13-564319623c4f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: an integer is required (got type _io.TextIOWrapper)"
     ]
    }
   ],
   "source": [
    "#os.close(): Close file descriptor fd. A file opened using open(), can be closed by close()only. \n",
    "#    But file opened through os.popen(), can be closed with close() or os.close(). \n",
    "#    If we try closing a file opened with open(), using os.close(), Python would throw TypeError.\n",
    "import os \n",
    "fd = \"GFG.txt\"\n",
    "file = open(fd, 'r') \n",
    "text = file.read() \n",
    "print(text) \n",
    "os.close(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#os.rename(): A file old.txt can be renamed to new.txt, using the function os.rename(). \n",
    "#    The name of the file changes only if, \n",
    "#    the file exists and user has sufficient privilege permission to change the file.\n",
    "import os \n",
    "fd = \"GFG.txt\"\n",
    "os.rename(fd,'New.txt') \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
